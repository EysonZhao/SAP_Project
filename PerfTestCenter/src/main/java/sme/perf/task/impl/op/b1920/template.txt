package sme.perf.task.impl.common;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import sme.perf.entity.Host;
import sme.perf.task.ParameterMissingException;
import sme.perf.task.Result;
import sme.perf.task.Status;
import sme.perf.task.Task;
import sme.perf.task.TaskParameterEntry;
import sme.perf.task.TaskParameterMap;

public class MSSQLDBBackup extends Task{

	@Override
	public Result execute() throws ParameterMissingException {
		status = Status.Running;
		
		initialParameters();
		
		status = Status.Finished;
		return Result.Pass;

	}

	@Override
	public String getDescription() {
		return getDescriptionTemplate();
	}

	
	private void initialParameters( ) throws ParameterMissingException{
		String hostStartInterval = parameters.getValue("HostStartInterval").toString();
		
		clientHosts = (List<Host>) hostParameters.getValue("TestClientHosts");
	}
	
	
	public static TaskParameterMap getParameterTemplate() {		
		Map<String, TaskParameterEntry> parameters = new HashMap<String, TaskParameterEntry>();
		parameters.put("", new TaskParameterEntry("",""));
		TaskParameterMap template = new TaskParameterMap();
		template.setParameters(parameters);
		return template;
	}

	public static TaskParameterMap getHostsTemplate() {
		Map<String, TaskParameterEntry> hostsParameter = new HashMap<String, TaskParameterEntry>();
		List<Host> clientHostList = new ArrayList<Host>();
		clientHostList.add(new Host("CNPVG50817980", "10.58.136.110", "administrator",
				"Initial0", "B1 Client Host"));
		hostsParameter.put("b1Clients", new TaskParameterEntry(clientHostList,
				"The hosts for b1 clients."));
		TaskParameterMap template = new TaskParameterMap();
		template.setParameters(hostsParameter);
		return template;
	}

	public static String getDescriptionTemplate() {
		return "Run test case via call LiteController.exe & LiteRunner.exe";
	}
}
